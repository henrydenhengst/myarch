#!/bin/bash
#
#  _   _                             _              _   _                      _   
# | | | | ___ _ __  _ __ _   _    __| | ___ _ __   | | | | ___ _ __   __ _ ___| |_ 
# | |_| |/ _ \ '_ \| '__| | | |  / _` |/ _ \ '_ \  | |_| |/ _ \ '_ \ / _` / __| __|
# |  _  |  __/ | | | |  | |_| | | (_| |  __/ | | | |  _  |  __/ | | | (_| \__ \ |_ 
# |_| |_|\___|_| |_|_|   \__, |  \__,_|\___|_| |_| |_| |_|\___|_| |_|\__, |___/\__|
#                        |___/                                       |___/      
#
#==================================================================================
#
#          FILE:  arch_install
#
#         USAGE:  bash arch_install
#
#   DESCRIPTION:  Arch Linux Unattended Install
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Henry den Hengst , henrydenhengst@gmail.com
#       COMPANY:  private
#       VERSION:  0.01
#       CREATED:  20-04-2023
#      REVISION:  ---
#==================================================================================
set -e

# Check for internet connectivity
if ! ping -q -c 1 -W 1 google.com > /dev/null; then
    echo "Error: No internet connection detected. Please connect to a network and try again."
    exit 1
fi


# Install the base system
pacstrap /mnt base base-devel

# Generate an fstab file
genfstab -U /mnt >> /mnt/etc/fstab

# Chroot into the newly installed system
arch-chroot /mnt <<EOF

# Set the hostname
echo "myhostname" > /etc/hostname

# Set the timezone
ln -sf /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime

# Set the locale
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

# Set the network configuration
echo "127.0.0.1 localhost" > /etc/hosts
echo "::1 localhost" >> /etc/hosts
echo "127.0.1.1 myhostname.localdomain myhostname" >> /etc/hosts
systemctl enable dhcpcd.service

# Retrieve the name of the installation disk
INSTALL_DISK=$(lsblk -dpno NAME $(mount | awk '$3 == "/" {print $1}') | head -n1)

# List available disks and retrieve the names of all disks except the installation disk
ALL_DISKS=$(lsblk -dpno NAME | grep -v "^${INSTALL_DISK}$")

# Partition and format all disks except the installation disk
for DISK in $ALL_DISKS
do
  parted -s /dev/$DISK mklabel gpt
  parted -s /dev/$DISK mkpart primary btrfs 0% 100%
  mkfs.btrfs /dev/${DISK}1
done

# Mount all BTRFS partitions
mkdir /mnt/btrfs
mount -t btrfs $(lsblk -dpno NAME | grep -v "^${INSTALL_DISK}$" | awk '{print "/dev/"$1"1"}') /mnt/btrfs

# Set up basic system configuration
echo "myhostname" > /etc/hostname
ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
sed -i '/en_US.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
echo "FONT=Lat2-Terminus16" >> /etc/vconsole.conf

# Install additional packages
pacman -S --noconfirm vim wget curl 

# Install and configure GRUB bootloader
pacman -S grub efibootmgr
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch_grub --recheck
grub-mkconfig -o /boot/grub/grub.cfg

# Install and configure additional packages, such as display manager and desktop environment
pacman -S gnome
systemctl enable gdm.service

# Install a consistent dark theme for GRUB, GDM, and GNOME

# Set variables
THEME_NAME="Sweet-Dark"
THEME_URL="https://github.com/EliverLara/Sweet/releases/download/v2.0.0/Sweet-Dark.tar.xz"
THEME_DIR="/usr/share/themes"

# Install dependencies
sudo pacman -S --noconfirm wget tar

# Download and extract theme files
cd /tmp
wget $THEME_URL
sudo tar -xf Sweet-Dark.tar.xz -C $THEME_DIR

# Configure GRUB theme
sudo mkdir -p /boot/grub/themes/$THEME_NAME
sudo cp -r $THEME_DIR/$THEME_NAME/grub/* /boot/grub/themes/$THEME_NAME/
sudo sed -i "s/GRUB_THEME=.*/GRUB_THEME=\"\/boot\/grub\/themes\/$THEME_NAME\/theme.txt\"/g" /etc/default/grub
sudo grub-mkconfig -o /boot/grub/grub.cfg

# Configure GDM theme
sudo cp -r $THEME_DIR/$THEME_NAME/gnome-shell/* /usr/share/gnome-shell/theme/
sudo sed -i "s/^icon-theme-name.*/icon-theme-name=$THEME_NAME/g" /usr/share/gnome-shell/theme/gdm3.css

# Configure GNOME theme
gsettings set org.gnome.desktop.interface gtk-theme $THEME_NAME
gsettings set org.gnome.desktop.wm.preferences theme $THEME_NAME
gsettings set org.gnome.desktop.interface icon-theme $THEME_NAME

echo "Done!"

# User account creation
read -p "Enter the username for the new user: " username
useradd -m -s /bin/bash "$username"
passwd "$username"
usermod -aG sudo "$username"
echo "User account created successfully"

# Define a list of packages that contain drivers
driver_packages=("linux" "linux-firmware" "nvidia" "amd-ucode")

# Loop through each package and check if it is installed
for package in "${driver_packages[@]}"
do
  if ! pacman -Qs $package > /dev/null ; then
    echo "Package $package is not installed, installing now..."
    sudo pacman -S $package --noconfirm
  fi
done
echo "All required drivers are installed."

# Check if systemd-cron is installed and enable/start the service
if ! pacman -Qi systemd-cron >/dev/null 2>&1; then
    echo "systemd-cron is not installed. Installing..."
    sudo pacman -S systemd-cron
    echo "Enabling and starting systemd-cron service..."
    sudo systemctl enable systemd-cron.service
    sudo systemctl start systemd-cron.service
else
    echo "systemd-cron is already installed."
    if ! systemctl is-enabled --quiet systemd-cron.service; then
        echo "Enabling systemd-cron service..."
        sudo systemctl enable systemd-cron.service
    fi
    if ! systemctl is-active --quiet systemd-cron.service; then
        echo "Starting systemd-cron service..."
        sudo systemctl start systemd-cron.service
    fi
fi

wget -c https://raw.githubusercontent.com/henrydenhengst/myarch/main/arch-auto-upgrade.sh
mv arch-auto-upgrade.sh /usr/local/bin/arch-auto-upgrade.sh
chmod +x /usr/local/bin/arch-auto-upgrade.sh

# Check if update-script.service file exists with correct content and create it if missing
UPDATE_SCRIPT_SERVICE="/etc/systemd/system/update-script.service"
UPDATE_SCRIPT_CONTENT="[Unit]\nDescription=Auto-update script\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/arch-auto-upgrade.sh\nRemainAfterExit=true\n\n[Install]\nWantedBy=multi-user.target\n"
if [[ ! -f "$UPDATE_SCRIPT_SERVICE" ]] || ! grep -q "$UPDATE_SCRIPT_CONTENT" "$UPDATE_SCRIPT_SERVICE"; then
    echo "Creating $UPDATE_SCRIPT_SERVICE file..."
    echo -e "$UPDATE_SCRIPT_CONTENT" | sudo tee "$UPDATE_SCRIPT_SERVICE" >/dev/null
    chmod +x /usr/local/bin/arch-auto-upgrade.sh
else
    echo "$UPDATE_SCRIPT_SERVICE file already exists with correct content."
fi


EOF

# Reboot the system
umount -R /mnt
reboot
